basePath: /api/v1
definitions:
  structs.Case:
    properties:
      collaborators:
        items:
          $ref: "#/definitions/structs.CollaboratorInfo"
        type: array
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  structs.CollaboratorInfo:
    properties:
      full_name:
        type: string
      id:
        type: string
      role:
        description: optional
        type: string
    type: object
  structs.CreateCaseRequest:
    properties:
      description:
        type: string
      title:
        type: string
    required:
      - title
    type: object
  structs.ErrorResponse:
    properties:
      details: {}
      error:
        type: string
      message:
        type: string
    type: object
  structs.EvidenceItem:
    properties:
      case_id:
        type: string
      hash:
        type: string
      id:
        type: string
      name:
        type: string
      storage_path:
        type: string
      type:
        type: string
      uploaded_at:
        type: string
      uploaded_by:
        type: string
    type: object
  structs.EvidencePreview:
    properties:
      id:
        type: string
      name:
        type: string
      preview_url:
        type: string
      thumbnail_url:
        type: string
      type:
        type: string
    type: object
  structs.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
    type: object
  structs.LoginResponse:
    properties:
      expires_at:
        type: string
      token:
        type: string
      user:
        $ref: "#/definitions/structs.User"
    type: object
  structs.RegisterUserRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      role:
        enum:
          - Incident Responder
          - Forensic Analyst
          - Malware Analyst
          - Threat Intelligent Analyst
          - DFIR Manager
          - Legal/Compliance Liaison
          - Detection Engineer
          - Generic user
        type: string
    required:
      - email
      - full_name
      - password
      - role
    type: object
  structs.ResetPasswordRequest:
    properties:
      email:
        type: string
    required:
      - email
    type: object
  structs.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  structs.UpdateCaseRequest:
    properties:
      description:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  structs.UpdateUserInfoRequest:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  structs.UpdateUserRoleRequest:
    properties:
      role:
        type: string
    required:
      - role
    type: object
  structs.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      is_verified:
        type: boolean
      role:
        $ref: "#/definitions/structs.UserRole"
    type: object
  structs.UserActivity:
    properties:
      action:
        type: string
      resource:
        type: string
      timestamp:
        type: string
      user_id:
        type: string
    type: object
  structs.UserRole:
    properties:
      id:
        type: string
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: support@aegis-dfir.com
    name: AEGIS Support
  description: API for collaborative digital forensics investigations.
  license:
    name: Apache 2.0
  title: AEGIS Platform API
  version: "1.0"
paths:
  /api/v1/admin/roles:
    get:
      consumes:
        - application/json
      description:
        Retrieves a list of all available user roles and their associated
        permissions.
      produces:
        - application/json
      responses:
        "200":
          description: Roles retrieved successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/structs.UserRole"
                    type: array
                type: object
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      summary: Get all user roles
      tags:
        - Admin
  /api/v1/admin/users:
    get:
      consumes:
        - application/json
      description:
        Retrieves a list of all registered users. Supports filtering by
        role, status, and creation date range.
      parameters:
        - description: Filter users by role (e.g., 'Forensic Analyst')
          in: query
          name: role
          type: string
        - description: Filter users by status (e.g., 'active', 'inactive')
          in: query
          name: status
          type: string
        - description: Filter users created after this date (YYYY-MM-DD)
          in: query
          name: start_date
          type: string
        - description: Filter users created before this date (YYYY-MM-DD)
          in: query
          name: end_date
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/structs.User"
                    type: array
                type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      summary: List all users
      tags:
        - Admin
    post:
      consumes:
        - application/json
      description:
        Registers a new user with the provided details. Only users with
        'Admin' role can perform this action.
      parameters:
        - description: User Registration Request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/structs.RegisterUserRequest"
      produces:
        - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    $ref: "#/definitions/structs.User"
                type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      summary: Register a new user
      tags:
        - Admin
  /api/v1/admin/users/{user_id}:
    delete:
      consumes:
        - application/json
      description:
        Deletes a specific user from the system. Only 'Admin' can perform
        this action.
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: "#/definitions/structs.SuccessResponse"
        "400":
          description: Invalid request (e.g., missing user ID)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      summary: Delete a user
      tags:
        - Admin
    get:
      consumes:
        - application/json
      description: Retrieves the activity log for a specific user.
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: User activity retrieved successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/structs.UserActivity"
                    type: array
                type: object
        "400":
          description: Invalid request (e.g., missing user ID)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      summary: Get user activity
      tags:
        - Admin
    put:
      consumes:
        - application/json
      description:
        Updates the role of a specific user. Only 'Admin' can perform this
        action.
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          type: string
        - description: User Role Update Request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/structs.UpdateUserRoleRequest"
      produces:
        - application/json
      responses:
        "200":
          description: User role updated successfully
          schema:
            $ref: "#/definitions/structs.SuccessResponse"
        "400":
          description: Invalid request payload or user ID
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      summary: Update a user's role
      tags:
        - Admin
  /api/v1/auth/login:
    post:
      consumes:
        - application/json
      description: Authenticates a user and returns a JWT token upon successful login.
      parameters:
        - description: User Login Credentials
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/structs.LoginRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    $ref: "#/definitions/structs.LoginResponse"
                type: object
        "400":
          description: Invalid request payload or credentials
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Authentication failed (invalid credentials)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      summary: User login
      tags:
        - Authentication
  /api/v1/auth/logout:
    post:
      consumes:
        - application/json
      description:
        Logs out the currently authenticated user by invalidating their
        session or token. Requires authentication.
      produces:
        - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            $ref: "#/definitions/structs.SuccessResponse"
        "401":
          description: Unauthorized (user not authenticated)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: User logout
      tags:
        - Authentication
  /api/v1/auth/password-reset:
    post:
      consumes:
        - application/json
      description:
        Initiates the password reset process by sending a reset email to
        the user's registered email address.
      parameters:
        - description: Password Reset Request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/structs.ResetPasswordRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Password reset email sent successfully
          schema:
            $ref: "#/definitions/structs.SuccessResponse"
        "400":
          description: Invalid request payload (e.g., malformed email)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      summary: Request password reset
      tags:
        - Authentication
  /api/v1/cases:
    get:
      consumes:
        - application/json
      description: Retrieves a paginated and filterable list of security cases.
      parameters:
        - description: Filter cases by status (e.g., 'open', 'closed')
          in: query
          name: status
          type: string
        - description: Filter cases created after this date (YYYY-MM-DD)
          in: query
          name: start_date
          type: string
        - description: Filter cases created before this date (YYYY-MM-DD)
          in: query
          name: end_date
          type: string
        - default: 1
          description: "Page number for pagination (default: 1)"
          in: query
          name: page
          type: integer
        - default: 10
          description: "Number of items per page (default: 10, max: 100)"
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Cases retrieved successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/structs.Case"
                    type: array
                type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Get all cases
      tags:
        - Cases
    post:
      consumes:
        - application/json
      description: Creates a new security case. Requires 'Admin' role.
      parameters:
        - description: Case Creation Request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/structs.CreateCaseRequest"
      produces:
        - application/json
      responses:
        "201":
          description: Case created successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    $ref: "#/definitions/structs.Case"
                type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "403":
          description: Forbidden (insufficient role)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Create a new case
      tags:
        - Cases
  /api/v1/cases/{id}:
    get:
      consumes:
        - application/json
      description: Retrieves details of a single security case by its ID.
      parameters:
        - description: Case ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Case retrieved successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    $ref: "#/definitions/structs.Case"
                type: object
        "400":
          description: Invalid request (e.g., missing case ID)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "404":
          description: Case not found
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Get a specific case
      tags:
        - Cases
    put:
      consumes:
        - application/json
      description:
        Updates the details of an existing security case. Requires 'Admin'
        role.
      parameters:
        - description: Case ID
          in: path
          name: id
          required: true
          type: string
        - description: Case Update Request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/structs.UpdateCaseRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Case updated successfully
          schema:
            $ref: "#/definitions/structs.SuccessResponse"
        "400":
          description: Invalid request payload or case ID
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "403":
          description: Forbidden (insufficient role)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "404":
          description: Case not found
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Update a case
      tags:
        - Cases
  /api/v1/cases/{id}/collaborators:
    get:
      consumes:
        - application/json
      description: Retrieves a list of users collaborating on a specific case.
      parameters:
        - description: Case ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Collaborators retrieved successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/structs.User"
                    type: array
                type: object
        "400":
          description: Invalid request (e.g., missing case ID)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "404":
          description: Case not found
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Get case collaborators
      tags:
        - Cases
    post:
      consumes:
        - application/json
      description:
        Adds a user as a collaborator to a specific case. Requires 'Admin'
        role.
      parameters:
        - description: Case ID
          in: path
          name: id
          required: true
          type: string
        - description: Collaborator Details
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/structs.User"
      produces:
        - application/json
      responses:
        "201":
          description: Collaborator added successfully
          schema:
            $ref: "#/definitions/structs.SuccessResponse"
        "400":
          description: Invalid request payload or case ID
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "403":
          description: Forbidden (insufficient role)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "404":
          description: Case not found
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Add a collaborator to a case
      tags:
        - Cases
  /api/v1/cases/{id}/collaborators/{user}:
    delete:
      consumes:
        - application/json
      description:
        Removes a user from the list of collaborators on a specific case.
        Requires 'Admin' role.
      parameters:
        - description: Case ID
          in: path
          name: id
          required: true
          type: string
        - description: User ID of the collaborator to remove
          in: path
          name: user
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Collaborator removed successfully
          schema:
            $ref: "#/definitions/structs.SuccessResponse"
        "400":
          description: Invalid request (e.g., missing IDs)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "403":
          description: Forbidden (insufficient role)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "404":
          description: Case or user not found
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Remove a collaborator from a case
      tags:
        - Cases
  /api/v1/cases/{id}/evidence:
    get:
      consumes:
        - application/json
      description:
        Retrieves a list of evidence items associated with a specific security
        case. Supports filtering.
      parameters:
        - description: Case ID
          in: path
          name: id
          required: true
          type: string
        - description: Filter evidence by type (e.g., 'image', 'document', 'application/pdf')
          in: query
          name: type
          type: string
        - description: Filter evidence by the user who uploaded it (User ID)
          in: query
          name: uploaded_by
          type: string
        - description: Filter evidence uploaded after this date (YYYY-MM-DD)
          in: query
          name: start_date
          type: string
        - description: Filter evidence uploaded before this date (YYYY-MM-DD)
          in: query
          name: end_date
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Evidence retrieved successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/structs.EvidenceItem"
                    type: array
                type: object
        "400":
          description:
            Invalid request parameters (e.g., missing case ID, invalid
            query)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "404":
          description: Case not found
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Get evidence for a case
      tags:
        - Evidence
    post:
      consumes:
        - multipart/form-data
      description: Uploads a new evidence file to a specified security case.
      parameters:
        - description: Case ID
          in: path
          name: id
          required: true
          type: string
        - description: Evidence file to upload (max 10GB)
          in: formData
          name: file
          required: true
          type: file
        - description: Optional description for the evidence file
          in: formData
          name: description
          type: string
      produces:
        - application/json
      responses:
        "201":
          description: Evidence uploaded successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    $ref: "#/definitions/structs.EvidenceItem"
                type: object
        "400":
          description:
            Invalid request (e.g., missing file, invalid case ID, file
            too large)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "403":
          description: Forbidden (insufficient role)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Upload evidence to a case
      tags:
        - Evidence
  /api/v1/cases/{id}/evidence/{e_id}:
    get:
      consumes:
        - application/json
      description:
        Retrieves details of a single evidence item by its ID within a
        specific case.
      parameters:
        - description: Case ID
          in: path
          name: id
          required: true
          type: string
        - description: Evidence Item ID
          in: path
          name: e_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Evidence item retrieved successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    $ref: "#/definitions/structs.EvidenceItem"
                type: object
        "400":
          description: Invalid request (e.g., missing IDs)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "404":
          description: Case or evidence item not found
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Get a specific evidence item
      tags:
        - Evidence
  /api/v1/cases/{id}/evidence/{e_id}/preview:
    get:
      consumes:
        - application/json
      description: Generates a preview for a specific evidence item.
      parameters:
        - description: Case ID
          in: path
          name: id
          required: true
          type: string
        - description: Evidence Item ID
          in: path
          name: e_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Evidence preview generated successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    $ref: "#/definitions/structs.EvidencePreview"
                type: object
        "400":
          description: Invalid request (e.g., missing IDs)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "404":
          description: Case or evidence item not found
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Get evidence preview
      tags:
        - Evidence
  /api/v1/user/cases:
    get:
      consumes:
        - application/json
      description:
        Retrieves a list of security cases that the authenticated user
        is involved in.
      produces:
        - application/json
      responses:
        "200":
          description: User cases retrieved successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/structs.Case"
                    type: array
                type: object
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Get cases assigned to the current user
      tags:
        - User
  /api/v1/user/info:
    get:
      consumes:
        - application/json
      description:
        Retrieves the detailed profile information for the authenticated
        user.
      produces:
        - application/json
      responses:
        "200":
          description: User information retrieved successfully
          schema:
            allOf:
              - $ref: "#/definitions/structs.SuccessResponse"
              - properties:
                  data:
                    $ref: "#/definitions/structs.User"
                type: object
        "401":
          description: Unauthorized (user not authenticated)
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Get current user's information
      tags:
        - User
    put:
      consumes:
        - application/json
      description:
        Updates the profile details (e.g., name, email) for the authenticated
        user.
      parameters:
        - description: User Info Update Request
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/structs.UpdateUserInfoRequest"
      produces:
        - application/json
      responses:
        "200":
          description: User information updated successfully
          schema:
            $ref: "#/definitions/structs.SuccessResponse"
        "400":
          description: Invalid request payload
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/structs.ErrorResponse"
      security:
        - ApiKeyAuth: []
      summary: Update current user's information
      tags:
        - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
